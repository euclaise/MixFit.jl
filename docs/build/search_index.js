var documenterSearchIndex = {"docs":
[{"location":"#MixFit.jl-Documentation-1","page":"MixFit.jl Documentation","title":"MixFit.jl Documentation","text":"","category":"section"},{"location":"#Model-estimation-1","page":"MixFit.jl Documentation","title":"Model estimation","text":"","category":"section"},{"location":"#","page":"MixFit.jl Documentation","title":"MixFit.jl Documentation","text":"MixModel\nmixfit\ndensfit\nem_run!\nem_step!","category":"page"},{"location":"#MixFit.MixModel","page":"MixFit.jl Documentation","title":"MixFit.MixModel","text":"Structure of mixture model parameters.\n\nVariables\n\nα::Vector{Float32}: Weights of the components\nμ::Vector{Float32}: Means of the components\nσ::Vector{Float32}: SDs of the components\n\n\n\n\n\n","category":"type"},{"location":"#MixFit.mixfit","page":"MixFit.jl Documentation","title":"MixFit.mixfit","text":"mixfit(x::Vector{<:Real},\n        m::Int;\n        rtol::AbstractFloat = 0.00001,\n        α::Vector{<:Real} = fill(1/m, m),\n        μ::Vector{<:Real} = quantile!(x, (1:m)/m),\n        σ::Vector{<:Real} = fill(std(x) / √(m), m),\n        maxswap::Int = 5 * m^2,\n        maxiter_inner::Int = 0,\n        maxiter::Int = 0,\n        silent::Bool = false,\n        kernel::Function = dnorm)\n\nGet the maximum likelihood estimate of an m-component mixture model using random-swap EM.  Random-swap EM avoids local optimums by randomly replacing components and using the result with the maximum likelihood [1]. The component distributions are given by kernel.  The maximum number of swaps is given by maxswap.  If results vary across runs, then maxswap is too low - the default is 5m^2.  maxiter_inner is the maximum number of iterations for the estimates that go through the swapping process, and maxiter is the maximum for the final estimate.  Similarly, rtol is for the final estimate, while the inner estimates use 0.1.  To supress output, simply set silent to true. Starting values can be provided via the α, μ, and σ arguments, but this shouldn't be necassary due to the use of random swapping.\n\n[1]: Zhao, Q., Hautamäki, V., Kärkkäinen, I., & Fränti, P. (2012). Random swap EM algorithm for Gaussian mixture models. Pattern Recognition Letters, 33(16), 2120-2126.\n\nSee also: densfit, em_run!\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.densfit","page":"MixFit.jl Documentation","title":"MixFit.densfit","text":"densfit(x::Vector{<:Real};\n        wait::Int = 3,\n        rtol_em::AbstractFloat = 0.00001,\n        criterion::Function = AIC,\n        silent::Bool = false,\n        maxiter::Int = 0,\n        maxiter_inner::Int = 0,\n        maxswap::Int = 0,\n        kernel::Function = dnorm)\n\nEstimate the density of x by a mixture model.  Successive mixture model estimates are done via random swap EM with increasing number of clusters until criterion decreases for 3 iterations.  By default, criterion uses AIC, which performs well for density estimation [2].  However, AIC2 should be used instead if one wants to actually estimate the number of clusters in a true mixture model. The relative tolerance for EM convergence is given by rtol_em.  To disable output, set silent to true.\n\n[2]: Wang, Y., & Chee, C. S. (2012). Density estimation using non-parametric and semi-parametric mixtures. Statistical Modelling, 12(1), 67-92.\n\nSee also: densfit, em_run!\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.em_run!","page":"MixFit.jl Documentation","title":"MixFit.em_run!","text":"em_run!(est::MixModel, x::Vector{<:Real}, rtol::AbstractFloat = 0.00001, maxiter::Int = 0)\n\nRun EM steps until the percent increase in log-likelihood is below rtol or the number of iterations is greater than maxiter. If maxiter is set to zero, EM steps will continue until the increase is below rtol regardless of the number of iterations.\n\nSee also: em_run!, mixfit\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.em_step!","page":"MixFit.jl Documentation","title":"MixFit.em_step!","text":"em_step!(est::MixModel, x::Vector{<:Real})\n\nRun a single EM step.\n\nSee also: em_run!, mixfit\n\n\n\n\n\n","category":"function"},{"location":"#Model-methods-1","page":"MixFit.jl Documentation","title":"Model methods","text":"","category":"section"},{"location":"#","page":"MixFit.jl Documentation","title":"MixFit.jl Documentation","text":"LL\nAIC\nAIC3\nBIC\ndescribe","category":"page"},{"location":"#MixFit.LL","page":"MixFit.jl Documentation","title":"MixFit.LL","text":"LL(x::Vector{<:Real}, est::MixModel)\n\nGet the log-likelihood of a mixture model detailed in est, using the data x.\n\nSee also: AIC, AIC3, BIC\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.AIC","page":"MixFit.jl Documentation","title":"MixFit.AIC","text":"AIC(x::Vector{<:Real}, est::MixModel)\n\nGet the AIC of a mixture model, using the data x. The AIC for a model M is given by: AIC(M) = 2*l(M) - 2*k Where k is the number of parameters.\n\nSee also: AIC3, BIC, LL\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.AIC3","page":"MixFit.jl Documentation","title":"MixFit.AIC3","text":"AIC3(x::Vector{<:Real}, est::MixModel)\n\nGet the modified AIC, \"AIC3\", of a mixture model using the data x. The AIC3 for a model M is given by [3]: AIC(M) = 2*l(M) - 3*k Where k is the number of parameters.\n\n[3]: Bozdogan, H. (1994). Mixture-model cluster analysis using model selection criteria and a new informational measure of complexity. In Proceedings of the first US/Japan conference on the frontiers of statistical modeling: An informational approach (pp. 69-113). Springer, Dordrecht.\n\nSee also: AIC, BIC, LL\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.BIC","page":"MixFit.jl Documentation","title":"MixFit.BIC","text":"BIC(x::Vector{<:Real}, est::MixModel)\n\nGet the BIC of a mixture model using the data x.\n\nSee also: AIC, AIC3, LL\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.describe","page":"MixFit.jl Documentation","title":"MixFit.describe","text":"describe(est::MixModel; data::Vector{<:Real})\n\nPretty-print the parameters and fit indicies for the mixture model est. If data is not specified, fit indicies will not be printed.\n\n\n\n\n\n","category":"function"},{"location":"#Distributions-1","page":"MixFit.jl Documentation","title":"Distributions","text":"","category":"section"},{"location":"#","page":"MixFit.jl Documentation","title":"MixFit.jl Documentation","text":"dnorm\ndgumbel\ndgamma\ndlognorm","category":"page"},{"location":"#MixFit.dnorm","page":"MixFit.jl Documentation","title":"MixFit.dnorm","text":"dnorm(x::Real, μ::Real, σ::Real)\n\nNormal distribution density function\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.dgumbel","page":"MixFit.jl Documentation","title":"MixFit.dgumbel","text":"dgumbel(x::Real, μ::Real, σ::Real)\n\nGumbel density, parameterized by mean (μ) and SD (σ) of x.\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.dgamma","page":"MixFit.jl Documentation","title":"MixFit.dgamma","text":"dgamma(x::Real, μ::Real, σ::Real)\n\nGamma density, parameterized by mean (μ) and sigma(σ) of x.\n\n\n\n\n\n","category":"function"},{"location":"#MixFit.dlognorm","page":"MixFit.jl Documentation","title":"MixFit.dlognorm","text":"dlognorm(x::Real, μ::Real, σ::Real)\n\nLognormal density, parameterized by mean (μ) and SD (σ) of x, NOT of log(x).\n\n\n\n\n\n","category":"function"}]
}
